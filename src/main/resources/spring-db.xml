<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
">


    <!-- 配置HikariConfig，定义数据库相关信息 -->
    <bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
        <property name="driverClassName" value="${db.mysql.driver}" />
        <property name="jdbcUrl" value="${db.mysql.url}" />
        <property name="username" value="${db.mysql.username}" />
        <property name="password" value="${db.mysql.password}" />
        <!-- 连接只读数据库时配置为true，保证安全 -->
        <property name="readOnly" value="false"/>
        <!-- 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒 -->
        <property name="connectionTimeout" value="${db.mysql.connectionTimeout}"/>
        <!-- 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟 -->
        <property name="idleTimeout" value="${db.mysql.idleTimeout}"/>
        <!-- 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL wait_timeout参数（show variables like '%timeout%';） -->
        <property name="maxLifetime" value="${db.mysql.maxLifetime}"/>
        <!-- 连接池中保持的最小空闲连接数。缺省值：同maximumPoolSize -->
        <property name="minimumIdle" value="${db.mysql.minimumIdle}"/>
        <!-- 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count) -->
        <property name="maximumPoolSize" value="${db.mysql.maximumPoolSize}"/>
    </bean>


    <!-- 配置数据源（HikariDataSource), 供ORM框架调用 -->
    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <constructor-arg index="0" type="com.zaxxer.hikari.HikariConfig" ref="hikariConfig" />
    </bean>

    <!-- 配置事务管理器,mybatis使用DataSourceTransactionManager -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 对标注有@Transactional注解的Bean进行处理，以织入事务管理切面  -->
    <!-- 如果不配置transaction-manager，默认使用id为"transactionManager"的bean，proxy-target-class为true表示使用CGLib动态代理 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

    <!-- 配置Mybatis的SqlSessionFactoryBean, 为映射器Mapper类提供SqlSession -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 该属性可以给包中的类注册别名，注册后可以直接使用类名，而不用使用全限定的类名（就是不用包含包名）。该属性可以配置多个，可以用,;\t\n进行分割 -->
        <property name="typeAliasesPackage" value="com.wy.domain" />
        <!-- MyBatis的sql映射文件 -->
        <property name="mapperLocations" value="classpath*:mapper/**.xml" />
    </bean>

    <!-- 使用一个MapperScannerConfigurer,它将会查找类路径下的映射器并自动将它们创建成MapperFactoryBean。-->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- basePackage属性是让你为映射器接口文件设置基本的包路径 -->
        <property name="basePackage" value="com.wy.dao" />
        <!-- 使用sqlSessionFactoryBeanName配置该MapperScannerConfigurer所使用的SqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>


</beans>